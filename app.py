import streamlit as st
import plotly.graph_objects as go
import random

st.set_page_config(page_title="V√≤ng quay may m·∫Øn", page_icon="üé≤")

# Ti√™u ƒë·ªÅ
st.title("V√≤ng quay may m·∫Øn üé°")

# Nh·∫≠p danh s√°ch t√™n (m·ªói d√≤ng m·ªôt ng∆∞·ªùi/m·ªôt m·ª•c)
names_input = st.text_area(
    "Nh·∫≠p danh s√°ch t√™n ho·∫∑c l·ª±a ch·ªçn (m·ªói d√≤ng m·ªôt m·ª•c):"
).strip()
names = [n for n in names_input.splitlines() if n]

# N·∫øu c√≥ danh s√°ch, hi·ªÉn th·ªã n√∫t "Quay s·ªë"
if names:
    if st.button("Quay s·ªë"):
        # T·∫°o g√≥c quay ng·∫´u nhi√™n
        start_angle = random.uniform(0, 360)
        # X√°c ƒë·ªãnh m·ª•c tr√∫ng th∆∞·ªüng d·ª±a tr√™n g√≥c quay
        selected_idx = int(
            ((360 - start_angle) % 360) / (360 / len(names))
        )
        selected_name = names[selected_idx]

        # Hi·ªÉn th·ªã th√¥ng b√°o tr√∫ng th∆∞·ªüng
        st.success(f"üéâ Ch√∫c m·ª´ng **{selected_name}**!")

        # V·∫Ω bi·ªÉu ƒë·ªì v√≤ng tr√≤n m√¥ ph·ªèng v√≤ng quay
        fig = go.Figure(
            data=[
                go.Pie(
                    labels=names,
                    values=[1] * len(names),
                    hole=0.3,
                    rotation=start_angle,
                    sort=False,
                )
            ]
        )
        fig.update_layout(
            showlegend=False,
            annotations=[
                dict(text="Quay", x=0.5, y=0.5, font_size=20, showarrow=False)
            ],
        )
        st.plotly_chart(fig, use_container_width=True)
else:
    st.info("H√£y nh·∫≠p √≠t nh·∫•t m·ªôt t√™n ho·∫∑c m·ª•c ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

# --------- T√πy ch·ªçn: V√≤ng quay Chart.js (nh√∫ng HTML/JS) ----------
# N·∫øu b·∫°n mu·ªën s·ª≠ d·ª•ng Chart.js ƒë·ªÉ c√≥ hi·ªáu ·ª©ng quay m∆∞·ª£t h∆°n,
# b·ªè ghi ch√∫ ph·∫ßn b√™n d∆∞·ªõi v√† c√†i th√™m th∆∞ vi·ªán streamlit.components.v1:

# import streamlit.components.v1 as components
# import json
# if st.button("Quay b·∫±ng Chart.js"):
#     labels_json = json.dumps(names)
#     data_json = json.dumps([1] * len(names))
#     random_rotation = random.uniform(0, 360)
#     html_code = f"""
#     <canvas id="wheel"></canvas>
#     <button id="spin">Quay</button>
#     <p id="result"></p>
#     <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
#     <script>
#       const labels = {labels_json};
#       const data = {{
#         labels: labels,
#         datasets: [{{
#           data: {data_json},
#           backgroundColor: labels.map((_, i) =>
#             `hsl(${{(i/labels.length)*360}}, 80%, 60%)`)
#         }}]
#       }};
#       const ctx = document.getElementById('wheel').getContext('2d');
#       const myChart = new Chart(ctx, {{
#         type: 'pie',
#         data: data,
#         options: {{
#           rotation: {random_rotation},
#           animation: {{
#             duration: 5000,
#             easing: 'easeOutCubic'
#           }},
#           plugins: {{
#             legend: {{ display: false }}
#           }}
#         }}
#       }});
#       document.getElementById('spin').onclick = function() {{
#         const randomAngle = Math.random() * 360;
#         myChart.options.rotation = randomAngle;
#         myChart.update();
#         const segmentSize = 360 / labels.length;
#         const idx = Math.floor(((360 - randomAngle) % 360) / segmentSize);
#         document.getElementById('result').innerHTML = 'K·∫øt qu·∫£: ' + labels[idx];
#       }};
#     </script>
#     """
#     components.html(html_code, height=500)
